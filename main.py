import telebot
import io
import time
import httpx
import re
from typing import Optional, Dict, Tuple, List, Any, DefaultDict
from datetime import datetime, timedelta
from collections import defaultdict
from dataclasses import dataclass
from functools import wraps

import config
from logging_setup import setup_logging
from voice import get_all_voices, generate_audio
from elevenlabs.core.api_error import ApiError
from telebot.apihelper import ApiTelegramException
from pre_processing import prepare_for_tts

logger = setup_logging(config.LOG_LEVEL)

# Constants
ELEVENLABS_USER_API_URL = "https://api.elevenlabs.io/v1/user"
"""ElevenLabs API endpoint for user quota information."""

CREDITS_PER_CHARS = 10
"""Number of characters per 1 ElevenLabs credit."""

VOICE_CACHE_TTL_SECONDS = 3600
"""Voice list cache TTL in seconds (1 hour)."""

USER_DATA_TTL_SECONDS = 86400
"""User data storage TTL in seconds (24 hours)."""

MODE_LABELS = {
    "off": "–ë–µ–∑ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏",
    "announcer": "–î–ò–ö–¢–û–†–°–ö–ê–Ø –†–ï–ß–¨",
    "conversational": "–†–ê–ó–ì–û–í–û–†–ù–´–ô –°–¢–ò–õ–¨"
}


def measure_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.
    
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        func_name = func.__name__
        try:
            result = func(*args, **kwargs)
            elapsed = time.time() - start
            if config.DEBUG or elapsed > 1.0:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤ DEBUG
                logger.info(
                    "‚è±Ô∏è Function %s completed in %.3fs",
                    func_name,
                    elapsed
                )
            return result
        except Exception as e:
            elapsed = time.time() - start
            logger.error(
                "‚ùå Function %s failed after %.3fs: %s",
                func_name,
                elapsed,
                str(e)
            )
            raise
    return wrapper


@dataclass(frozen=True)
class VoiceInfo:
    """–ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ –¥–ª—è TTS.
    
    Attributes:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        voice_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        language: –Ø–∑—ã–∫ –≥–æ–ª–æ—Å–∞ (ru, en, multi –∏ —Ç.–¥.)
        gender: –ü–æ–ª –≥–æ–ª–æ—Å–∞ (male, female)
    """
    name: str
    voice_id: str
    language: str
    gender: str
    
    @property
    def lang_priority(self) -> int:
        """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —è–∑—ã–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (0=RU, 1=multi, 2=–æ—Å—Ç–∞–ª—å–Ω—ã–µ)."""
        l = self.language.lower()
        if l in ("ru", "russian", "—Ä—É—Å—Å–∫–∏–π"):
            return 0
        if "multi" in l:
            return 1
        return 2
    
    def sort_key(self) -> Tuple[int, str]:
        """–ö–ª—é—á –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —è–∑—ã–∫—É, –ø–æ—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏."""
        return (self.lang_priority, self.name.lower())


class BotConfig:
    """Bot-specific configuration constants."""
    
    # UI –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    VOICE_BUTTONS_PER_ROW = 2
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –≤ —Ä—è–¥—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    
    BACK_BUTTON_TEXT = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    """–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    
    VOICE_SELECT_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:"
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."""
    
    SETTINGS_PROMPT = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üìù <b>–†–µ–∂–∏–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Å–µ–≤–¥–æ-SSML –¥–ª—è ElevenLabs):</b>\n"
        "üé≠ <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:</b>"
    )
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Å–µ–≤–¥–æ-SSML –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞."""
    
    # Callback data prefixes
    CALLBACK_CATEGORY = "cat:"
    CALLBACK_VOICE = "voice:"
    CALLBACK_SSML = "ssml:"
    CALLBACK_SETTINGS = "settings"
    CALLBACK_BACK = "back_to_menu"
    CALLBACK_FORMAT = "fmt:"

    # Supported response formats
    FORMAT_OGG = "ogg"
    FORMAT_MP3 = "mp3"
    FORMAT_BOTH = "both"


class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞.
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ.
    """
    
    def __init__(self, max_requests: int = 10, window_seconds: int = 60):
        """
        Args:
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
            window_seconds: –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.max_requests = max_requests
        self.window = timedelta(seconds=window_seconds)
        self._requests: DefaultDict[int, List[datetime]] = defaultdict(list)
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        now = datetime.now()
        cutoff = now - self.window
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self._requests[user_id] = [
            req_time for req_time in self._requests[user_id]
            if req_time > cutoff
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self._requests[user_id]) >= self.max_requests:
            logger.warning(
                "Rate limit exceeded for user_id=%s (%d requests in %ds)",
                user_id, len(self._requests[user_id]), self.window.total_seconds()
            )
            return False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        self._requests[user_id].append(now)
        return True


class UserDataStore:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ ttl_seconds.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –¥–æ–ª–≥–æ–π —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
    """
    
    def __init__(self, ttl_seconds: int = USER_DATA_TTL_SECONDS):
        self._data: Dict[int, Dict[str, Any]] = {}
        self._last_access: Dict[int, float] = {}
        self.ttl = ttl_seconds
    
    def get(self, user_id: int, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self._cleanup()
        self._last_access[user_id] = time.time()
        return self._data.get(user_id, {}).get(key, default)
    
    def set(self, user_id: int, key: str, value: Any) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self._cleanup()
        if user_id not in self._data:
            self._data[user_id] = {}
        self._data[user_id][key] = value
        self._last_access[user_id] = time.time()
    
    def _cleanup(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."""
        now = time.time()
        expired = [
            uid for uid, last in self._last_access.items() 
            if now - last > self.ttl
        ]
        if expired:
            for uid in expired:
                self._data.pop(uid, None)
                self._last_access.pop(uid, None)
            logger.info("Cleaned up %d inactive users from memory", len(expired))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if not config.bot_token:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
bot = telebot.TeleBot(config.bot_token)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π
user_data_store = UserDataStore(ttl_seconds=USER_DATA_TTL_SECONDS)

# Rate limiter: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
rate_limiter = RateLimiter(max_requests=10, window_seconds=60)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—ç—à–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Ä–∞—Å—Ç—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
category_to_voices: Dict[str, List[Tuple[str, str]]] = {"male": [], "female": []}
voice_id_to_name: Dict[str, str] = {}
voice_id_to_lang: Dict[str, str] = {}
_voices_cache: Optional[Tuple[datetime, Any]] = None

def language_flag(lang: str) -> str:
    l = (lang or "").strip().lower()
    if l in ("ru", "russian", "—Ä—É—Å—Å–∫–∏–π"):  # —Ä—É—Å—Å–∫–∏–π
        return "üá∑üá∫"
    if "multi" in l or l in ("multi", "multilingual"):
        return "üåê"
    if l in ("en", "english", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"):
        return "üá¨üáß"
    if l in ("us", "american"):
        return "üá∫üá∏"
    if l in ("de", "german", "–Ω–µ–º–µ—Ü–∫–∏–π"):
        return "üá©üá™"
    if l in ("fr", "french", "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"):
        return "üá´üá∑"
    if l in ("es", "spanish", "–∏—Å–ø–∞–Ω—Å–∫–∏–π"):
        return "üá™üá∏"
    if l in ("it", "italian", "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"):
        return "üáÆüáπ"
    if l in ("pt", "portuguese", "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"):
        return "üáµüáπ"
    if l in ("tr", "turkish", "—Ç—É—Ä–µ—Ü–∫–∏–π"):
        return "üáπüá∑"
    if l in ("pl", "polish", "–ø–æ–ª—å—Å–∫–∏–π"):
        return "üáµüá±"
    return "üåê"

def mode_label_for(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—É—é –º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Å–µ–≤–¥–æ-SSML –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    mode = user_data_store.get(user_id, "ssml_mode", "off")
    return MODE_LABELS.get(mode, mode)

def format_label_for(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º—É—é –º–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞."""
    fmt = user_data_store.get(user_id, "resp_format", BotConfig.FORMAT_BOTH)
    if fmt == BotConfig.FORMAT_OGG:
        return "OGG/Opus (–≥–æ–ª–æ—Å–æ–≤–æ–µ)"
    if fmt == BotConfig.FORMAT_MP3:
        return "MP3 (—Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)"
    return "OGG + MP3"

def build_main_menu_kb() -> telebot.types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    kb = telebot.types.InlineKeyboardMarkup()
    kb.add(
        telebot.types.InlineKeyboardButton("–ú—É–∂—Å–∫–∏–µ", callback_data=f"{BotConfig.CALLBACK_CATEGORY}male"),
        telebot.types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–µ", callback_data=f"{BotConfig.CALLBACK_CATEGORY}female"),
    )
    kb.add(telebot.types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=BotConfig.CALLBACK_SETTINGS))
    return kb

def send_main_menu(chat_id: int, user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    kb = build_main_menu_kb()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    voice_id = user_data_store.get(user_id, "voice_id")
    voice_text = voice_id_to_name.get(voice_id, "–ù–µ –≤—ã–±—Ä–∞–Ω") if voice_id else "–ù–µ –≤—ã–±—Ä–∞–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        "üìå <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b>\n"
        f"üéô <b>–ì–æ–ª–æ—Å:</b> {voice_text}\n"
        f"‚öôÔ∏è <b>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</b> {mode_label_for(user_id)}\n\n"
        f"üéö <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:</b> {format_label_for(user_id)}\n\n"
        "üí¨ <i>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∏ —Ä–µ–∂–∏–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:</i>"
    )
    
    bot.send_message(
        chat_id,
        message_text,
        reply_markup=kb,
        parse_mode="HTML"
    )

def preprocess_text_if_needed(user_id: int, text: str) -> str:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Å–µ–≤–¥–æ-SSML –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ ElevenLabs), –µ—Å–ª–∏ —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω."""
    mode = user_data_store.get(user_id, "ssml_mode", "off")
    if mode == "off":
        return text
    try:
        style = "announcer" if mode == "announcer" else "conversational"
        processed = prepare_for_tts(text, style=style)
        if config.DEBUG:
            logger.debug("Pseudo-SSML mode=%s user_id=%s", mode, user_id)
            logger.debug("Original: %s", text)
            logger.debug("Processed: %s", processed)
        return processed
    except Exception as e:
        logger.error("Error in text preprocessing: %s", e)
        return text


class HTTPClientSingleton:
    """Singleton –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å connection pooling."""
    _client: Optional[httpx.Client] = None
    
    @classmethod
    def get_client(cls) -> httpx.Client:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton HTTP –∫–ª–∏–µ–Ω—Ç —Å connection pooling."""
        if cls._client is None:
            cls._client = httpx.Client(
                timeout=httpx.Timeout(15.0),
                limits=httpx.Limits(max_connections=10, max_keepalive_connections=5)
            )
        return cls._client


# –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–≤–æ—Ç—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
_quota_cache: Optional[Tuple[float, Optional[int]]] = None
_QUOTA_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç


def check_quota_remaining_chars() -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∫–≤–æ—Ç—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ ElevenLabs —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç."""
    global _quota_cache
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    now = time.time()
    if _quota_cache is not None:
        cache_time, cached_value = _quota_cache
        if now - cache_time < _QUOTA_CACHE_TTL:
            if config.DEBUG:
                logger.debug("Using cached quota (age: %.1fs)", now - cache_time)
            return cached_value
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        api_key = config.elevenlabs_api_key
        if not api_key:
            return None
        
        client = HTTPClientSingleton.get_client()
        r = client.get(
            ELEVENLABS_USER_API_URL,
            headers={"xi-api-key": api_key}
        )
        
        if r.status_code != 200:
            return None
        
        data = r.json()
        limit_ = (data.get("subscription") or {}).get("character_limit")
        used_ = (data.get("subscription") or {}).get("character_count")
        
        if isinstance(limit_, int) and isinstance(used_, int):
            remaining = max(0, limit_ - used_)
            _quota_cache = (now, remaining)  # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.debug("Quota check: %d chars remaining (cached for 5 min)", remaining)
            return remaining
        
        return None
    except Exception as e:
        logger.error("Error checking quota: %s", e)
        return None


def estimate_credits(text: str) -> int:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
    return max(1, int(len(text) / CREDITS_PER_CHARS))


def validate_user_message(message: telebot.types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–æ—Ç–∞)."""
    if not message.from_user:
        logger.warning("Message without from_user: %s", message)
        return False
    if message.from_user.is_bot:
        logger.debug("Ignoring message from bot: %s", message.from_user.id)
        return False
    return True


def get_voices_cached() -> Any:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 1 —á–∞—Å."""
    global _voices_cache
    now = datetime.now()
    
    if _voices_cache is not None:
        cache_time, cached_voices = _voices_cache
        if (now - cache_time).total_seconds() < VOICE_CACHE_TTL_SECONDS:
            logger.debug("Using cached voices (age: %.1fs)", (now - cache_time).total_seconds())
            return cached_voices
    
    # –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    logger.info("Fetching fresh voices from ElevenLabs API")
    voices_response = get_all_voices()
    _voices_cache = (now, voices_response)
    return voices_response


@bot.message_handler(commands=['start'])
@measure_time
def send_welcome(message: telebot.types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        voices_response = get_voices_cached()
        voice_list = voices_response.voices

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —è–∑—ã–∫—É –∏ –∏–º–µ–Ω–∏
        category_to_voices["male"].clear()
        category_to_voices["female"].clear()
        temp_male = []  # (name, voice_id, language_label)
        temp_female = []

        for v in voice_list:
            labels = getattr(v, "labels", {}) if hasattr(v, "labels") else {}
            gender = labels.get("gender") or getattr(v, "gender", None)
            language_label = labels.get("language", "")
            name = getattr(v, "name", "Voice")
            vid = getattr(v, "voice_id", None)
            if not vid:
                continue
            voice_id_to_name[vid] = name
            voice_id_to_lang[vid] = language_label

            g = (gender or "").lower()
            if "female" in g:
                temp_female.append((name, vid, language_label))
            elif "male" in g:
                temp_male.append((name, vid, language_label))
            else:
                # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –º—É–∂—Å–∫–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
                temp_male.append((name, vid, language_label))

        def lang_priority(lang: str) -> int:
            l = (lang or "").lower()
            if l in ("ru", "russian", "—Ä—É—Å—Å–∫–∏–π"):
                return 0
            if "multi" in l:  # –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ
                return 1
            return 2

        def sort_key(item):
            name, _vid, lang = item
            return (lang_priority(lang), name.lower())

        temp_male.sort(key=sort_key)
        temp_female.sort(key=sort_key)

        category_to_voices["male"] = [(n, vid) for (n, vid, _lang) in temp_male]
        category_to_voices["female"] = [(n, vid) for (n, vid, _lang) in temp_female]

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        logger.info("Main menu opened for user_id=%s", message.from_user.id)
        send_main_menu(message.chat.id, message.from_user.id)
    except ApiError as e:
        logger.error("ElevenLabs ApiError during voice fetch: %s", e)
        bot.reply_to(
            message,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ (–æ—à–∏–±–∫–∞ API).\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á ElevenLabs –∏ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É. –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏–æ–Ω–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, –≤–∫–ª—é—á–∏—Ç–µ VPN –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.\n"
            f"–î–µ—Ç–∞–ª–∏: {getattr(e, 'status_code', 'n/a')}"
        )
    except httpx.HTTPError as e:
        logger.error("Network error during voice fetch: %s", e)
        bot.reply_to(
            message,
            "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç/VPN –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /start."
        )
    except Exception as e:
        logger.exception("Unexpected error during voice fetch")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–ª–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda c: c.data.startswith("cat:"))
def on_category(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤ (–º—É–∂—Å–∫–∏–µ/–∂–µ–Ω—Å–∫–∏–µ)."""
    cat = c.data.split(":", 1)[1]
    voices = category_to_voices.get(cat, [])
    if not voices:
        bot.answer_callback_query(c.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ (inline)
    kb = telebot.types.InlineKeyboardMarkup()
    # –ø–æ –¥–≤–∞ –≤ —Ä—è–¥
    row = []
    for name, vid in voices:
        flag = language_flag(voice_id_to_lang.get(vid, ""))
        label = f"{flag} {name}"
        row.append(telebot.types.InlineKeyboardButton(label, callback_data=f"{BotConfig.CALLBACK_VOICE}{vid}"))
        if len(row) == BotConfig.VOICE_BUTTONS_PER_ROW:
            kb.row(*row)
            row = []
    if row:
        kb.row(*row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb.row(telebot.types.InlineKeyboardButton(BotConfig.BACK_BUTTON_TEXT, callback_data=BotConfig.CALLBACK_BACK))

    bot.edit_message_text(
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        text=BotConfig.VOICE_SELECT_PROMPT,
        reply_markup=kb,
    )

# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
@bot.callback_query_handler(func=lambda c: c.data.startswith("voice:"))
def on_voice(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞."""
    vid = c.data.split(":", 1)[1]
    user_id = c.from_user.id
    user_data_store.set(user_id, "voice_id", vid)
    bot.answer_callback_query(c.id, "–ì–æ–ª–æ—Å –≤—ã–±—Ä–∞–Ω")
    send_main_menu(c.message.chat.id, user_id)

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.callback_query_handler(func=lambda c: c.data == "settings")
def on_settings(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: –ø—Å–µ–≤–¥–æ-SSML –∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞."""
    user_id = c.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    voice_id = user_data_store.get(user_id, "voice_id")
    voice_text = voice_id_to_name.get(voice_id, "–ù–µ –≤—ã–±—Ä–∞–Ω") if voice_id else "–ù–µ –≤—ã–±—Ä–∞–Ω"
    mode_text = mode_label_for(user_id)
    format_text = format_label_for(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìå <b>–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:</b>\n"
        f"üéô <b>–ì–æ–ª–æ—Å:</b> {voice_text}\n"
        f"‚öôÔ∏è <b>–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞:</b> {mode_text}\n"
        f"üéö <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:</b> {format_text}\n\n"
        f"üìù <b>–†–µ–∂–∏–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Å–µ–≤–¥–æ-SSML –¥–ª—è ElevenLabs):</b>\n"
        f"üé≠ <b>–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:</b>"
    )
    
    kb = telebot.types.InlineKeyboardMarkup()
    
    # –†–µ–∂–∏–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Å–µ–≤–¥–æ-SSML –¥–ª—è ElevenLabs)
    kb.row(
        telebot.types.InlineKeyboardButton("–†–ê–ó–ì–û–í–û–†–ù–´–ô –°–¢–ò–õ–¨", callback_data=f"{BotConfig.CALLBACK_SSML}conversational"),
        telebot.types.InlineKeyboardButton("–î–ò–ö–¢–û–†–°–ö–ê–Ø –†–ï–ß–¨", callback_data=f"{BotConfig.CALLBACK_SSML}announcer")
    )
    kb.add(telebot.types.InlineKeyboardButton("–ë–µ–∑ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏", callback_data=f"{BotConfig.CALLBACK_SSML}off"))
    
    # –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    kb.row(
        telebot.types.InlineKeyboardButton("üîä OGG/Opus", callback_data=f"{BotConfig.CALLBACK_FORMAT}{BotConfig.FORMAT_OGG}"),
        telebot.types.InlineKeyboardButton("üéµ MP3", callback_data=f"{BotConfig.CALLBACK_FORMAT}{BotConfig.FORMAT_MP3}")
    )
    kb.add(telebot.types.InlineKeyboardButton("üîÄ OGG + MP3", callback_data=f"{BotConfig.CALLBACK_FORMAT}{BotConfig.FORMAT_BOTH}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb.row(telebot.types.InlineKeyboardButton(BotConfig.BACK_BUTTON_TEXT, callback_data=BotConfig.CALLBACK_BACK))
    
    bot.edit_message_text(
        chat_id=c.message.chat.id,
        message_id=c.message.message_id,
        text=settings_text,
        reply_markup=kb,
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith("ssml:"))
def on_ssml_mode(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Å–µ–≤–¥–æ-SSML –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    mode = c.data.split(":", 1)[1]
    user_id = c.from_user.id
    user_data_store.set(user_id, "ssml_mode", mode)
    labels = {"off": "–í—ã–∫–ª", "announcer": "–î–ò–ö–¢–û–†–°–ö–ê–Ø –†–ï–ß–¨", "conversational": "–†–ê–ó–ì–û–í–û–†–ù–´–ô –°–¢–ò–õ–¨"}
    bot.answer_callback_query(c.id, f"–ü—Å–µ–≤–¥–æ-SSML —Ä–µ–∂–∏–º: {labels.get(mode, mode)}")
    send_main_menu(c.message.chat.id, user_id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("fmt:"))
def on_format(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞."""
    fmt = c.data.split(":", 1)[1]
    user_id = c.from_user.id
    if fmt not in (BotConfig.FORMAT_OGG, BotConfig.FORMAT_MP3, BotConfig.FORMAT_BOTH):
        bot.answer_callback_query(c.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    user_data_store.set(user_id, "resp_format", fmt)
    labels = {
        BotConfig.FORMAT_OGG: "OGG/Opus (–≥–æ–ª–æ—Å–æ–≤–æ–µ)",
        BotConfig.FORMAT_MP3: "MP3 (—Ñ–∞–π–ª)",
        BotConfig.FORMAT_BOTH: "OGG + MP3",
    }
    bot.answer_callback_query(c.id, f"–§–æ—Ä–º–∞—Ç: {labels.get(fmt, fmt)}")
    send_main_menu(c.message.chat.id, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda c: c.data == "back_to_menu")
def on_back_to_menu(c: telebot.types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = c.from_user.id
    bot.answer_callback_query(c.id)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        bot.delete_message(c.message.chat.id, c.message.message_id)
    except ApiTelegramException as e:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        if config.DEBUG:
            logger.debug("Failed to delete message: %s", e)
    except Exception as e:
        logger.warning("Unexpected error deleting message: %s", e)
    send_main_menu(c.message.chat.id, user_id)


@bot.message_handler(func=lambda msg: True)
@measure_time
def generate_voice(message: telebot.types.Message) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ."""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not validate_user_message(message):
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not rate_limiter.is_allowed(user_id):
        bot.reply_to(
            message,
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "(–õ–∏–º–∏—Ç: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)"
        )
        return
    
    voice_id = user_data_store.get(user_id, "voice_id")
    if not voice_id:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        text = message.text
        if config.DEBUG:
            logger.debug("Incoming text from user_id=%s: %s", user_id, text)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(text) > config.MAX_TTS_CHARS:
            bot.reply_to(message, f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>{config.MAX_TTS_CHARS} —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MP3 –∏ OPUS (OGG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
        processed_text = preprocess_text_if_needed(user_id, text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ ElevenLabs
        remaining = check_quota_remaining_chars()
        needed_chars = len(processed_text)
        if remaining is not None and remaining < needed_chars:
            need_credits = estimate_credits(processed_text)
            have_credits = estimate_credits("x" * remaining) if remaining >= 0 else 0
            bot.reply_to(
                message,
                (
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–≤–æ—Ç—ã ElevenLabs.\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤: {remaining}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {needed_chars}.\n"
                    f"–û—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤: –Ω—É–∂–Ω–æ ~{need_credits}, –µ—Å—Ç—å ~{have_credits}.\n"
                    "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ),
            )
            return
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞
        voice_name = voice_id_to_name.get(voice_id, "Voice")
        mode = user_data_store.get(user_id, "ssml_mode", "off")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–∏–º—è –≥–æ–ª–æ—Å–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º)
        base_name = f"{voice_name} - {MODE_LABELS.get(mode, mode)}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        fmt = user_data_store.get(user_id, "resp_format", BotConfig.FORMAT_BOTH)
        send_ogg = fmt in (BotConfig.FORMAT_OGG, BotConfig.FORMAT_BOTH)
        send_mp3 = fmt in (BotConfig.FORMAT_MP3, BotConfig.FORMAT_BOTH)

        opus_bytes = None
        mp3_bytes = None
        
        if send_ogg:
            # Opus 48k –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ª–Ω–æ–π –≤ Telegram
            opus_bytes = generate_audio(processed_text, voice_id, output_format="opus_48000_64")
            voice_io = io.BytesIO(opus_bytes)
            voice_io.name = "voice.ogg"  # –≤–∞–∂–Ω–æ –¥–ª—è Telegram!
            voice_io.seek(0)
            bot.send_voice(chat_id=user_id, voice=voice_io)

        if send_mp3:
            # MP3 –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            mp3_bytes = generate_audio(processed_text, voice_id, output_format="mp3_44100_128")
            audio_io = io.BytesIO(mp3_bytes)
            audio_io.seek(0)
            bot.send_audio(
                chat_id=user_id, 
                audio=(base_name + ".mp3", audio_io),
                title=base_name,
                performer="ZeroTTS"
            )
    except ApiError as e:
        code = getattr(e, 'status_code', None)
        body = getattr(e, 'body', {}) or {}
        detail = body.get('detail') if isinstance(body, dict) else None
        status = (detail.get('status') if isinstance(detail, dict) else None) or ""
        msg = (detail.get('message') if isinstance(detail, dict) else None) or ""
        
        if code == 401 and status == 'quota_exceeded':
            # –≠—Ç–æ –Ω–µ –±–∞–≥, –∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
            remaining_cred = None
            required_cred = None
            try:
                nums = list(map(int, re.findall(r"(\d+)", msg)))
                if len(nums) >= 2:
                    remaining_cred, required_cred = nums[-2], nums[-1]
            except Exception:
                pass
            if config.DEBUG:
                logger.info("ElevenLabs quota_exceeded: %s", msg)
            
            if remaining_cred is not None and required_cred is not None:
                bot.reply_to(
                    message,
                    (
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ ElevenLabs.\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining_cred}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_cred}.\n"
                        "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    ),
                )
            else:
                bot.reply_to(
                    message,
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ ElevenLabs. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
        else:
            # –ü—Ä–æ—á–∏–µ —Å–ª—É—á–∞–∏ ApiError
            logger.error("ElevenLabs ApiError code=%s body=%s", code, body)
            hint = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ VPN/–∫–ª—é—á –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ" if code in (401, 403) else "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ ({code}). {hint}")
    except httpx.HTTPError as e:
        logger.error("Network error during audio generation: %s", e)
        bot.reply_to(message, "–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç/VPN –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.exception("Unexpected error during audio generation")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –≥–æ–ª–æ—Å.")


if __name__ == '__main__':
    logger.info("Starting ZeroTTS bot...")
    while True:
        try:
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error("Polling crashed, restarting in 3s: %s", e)
            time.sleep(3)
            continue
